# tools/exploits.py
from typing import Dict, List, Any, Optional
from pymetasploit3.msfrpc import MsfRpcError
from mcp.server.fastmcp import Context
from utils.msf_utils import get_client, ensure_connected

@ensure_connected
async def execute_module(
    ctx: Context,
    module_type: str,
    module_name: str,
    options: Dict[str, Any],
    payload: Optional[str] = None,
    payload_options: Optional[Dict[str, Any]] = None,
    run_as_job: Optional[bool] = False
) -> Dict:
    """Execute a Metasploit module with the specified options."""
    client = get_client()
    try:
        # Get the module
        module = client.modules.use(module_type, module_name)

        # Set module options
        for option, value in options.items():
            module[option] = value

        result = None # Initialize result

        # Handle Payload and Payload Options for exploit modules
        if module_type == 'exploit' and payload:
            payload_module = client.modules.use('payload', payload) # Create PayloadModule object

            if payload_options:
                for option, value in payload_options.items():
                    payload_module[option] = value # Set payload options on PayloadModule

            # Execute the exploit, passing the PayloadModule object
            result = module.execute(payload=payload_module)

        # For non-exploit modules or exploits without specific payloads
        else:
            result = module.execute()

        if run_as_job: # Check if run_as_job was requested
            job_id = result.get('job_id')
            if job_id:
                return {
                    "success": True,
                    "job_id": job_id,
                    "message": f"Module {module_type}/{module_name} started as job with ID: {job_id}"
                }
            else:
                return {
                    "success": False,
                    "message": f"Module {module_type}/{module_name} was expected to run as job but job_id not found. Execution might have failed or not run as job."
                }
        else:
            return {
                "success": True,
                "result": result
            }


    except MsfRpcError as e:
        return {"error": str(e)}

@ensure_connected
async def check_exploit(ctx: Context, module_name: str, options: Dict[str, Any]) -> Dict:
    """Check if a target is vulnerable to a specific exploit."""
    client = get_client()
    try:
        # Get the module
        module = client.modules.use('exploit', module_name)
        
        # Set module options
        for option, value in options.items():
            module[option] = value
        
        # Check if target is vulnerable
        result = module.check()
        
        return {
            "success": True,
            "result": result,
            "vulnerable": result.get('code', 0) > 0
        }
            
    except MsfRpcError as e:
        return {"error": str(e)}

@ensure_connected
async def list_compatible_payloads(ctx: Context, module_name: str) -> Dict:
    """List payloads compatible with a specific exploit."""
    client = get_client()
    try:
        # Get the exploit module
        module = client.modules.use('exploit', module_name)
        
        return {
            "success": True,
            "payloads": module.payloads
        }
            
    except MsfRpcError as e:
        return {"error": str(e)}

@ensure_connected
async def get_module_options(ctx: Context, module_type: str, module_name: str) -> Dict:
    """Get available options for a specific module."""
    client = get_client()
    try:
        # Get the module
        module = client.modules.use(module_type, module_name)
        
        # Get module options
        options = module.options
        
        return {
            "success": True,
            "options": options
        }
            
    except MsfRpcError as e:
        return {"error": str(e)} 